# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import asyncio
import logging
import random
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from keyboards.inline import get_main_menu_keyboard, get_profile_keyboard, get_rules_keyboard
from db.database import get_or_create_user, update_user_stats, add_stars_to_user

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

class GameStates(StatesGroup):
    waiting_for_bet = State()

async def safe_edit_message(message: types.Message, text: str, reply_markup=None):
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            pass
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
            logger.error(f"Error editing message: {e}")

async def main():
    try:
        storage = MemoryStorage()
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            user = get_or_create_user(message.from_user.id, message.from_user.username)
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ –ë–æ—Ç!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        @dp.callback_query(lambda c: c.data == "profile")
        async def show_profile(callback: types.CallbackQuery):
            user = get_or_create_user(callback.from_user.id, callback.from_user.username)
            await safe_edit_message(
                callback.message,
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞\n\n"
                f"–ò–º—è: {callback.from_user.first_name}\n"
                f"–ü–æ–±–µ–¥: {user.total_wins}\n"
                f"–í—Å–µ–≥–æ –∑–≤—ë–∑–¥: {user.total_stars:.2f} ‚≠ê\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É'\n"
                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
                reply_markup=get_profile_keyboard()
            )
            await callback.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª
        @dp.callback_query(lambda c: c.data == "rules")
        async def show_rules(callback: types.CallbackQuery):
            rules_text = (
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
                "1. –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –Ω–∞ –∑–≤—ë–∑–¥—ã ‚≠ê\n"
                "2. –í—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –±—Ä–æ—Å–∞–µ—Ç–µ –∫–æ—Å—Ç–∏\n"
                "3. –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–∞ –∫–æ—Å—Ç—è—Ö —Ä–∞–≤–Ω–∞ 10, 11 –∏–ª–∏ 12 - –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ\n"
                "4. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –≤—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ\n"
                "5. –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 2.5x –æ—Ç —Å—Ç–∞–≤–∫–∏\n"
                "6. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É\n\n"
                "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üé≤"
            )
            await safe_edit_message(callback.message, rules_text, reply_markup=get_rules_keyboard())
            await callback.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        @dp.callback_query(lambda c: c.data == "main_menu")
        async def return_to_menu(callback: types.CallbackQuery):
            await safe_edit_message(
                callback.message,
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
        @dp.callback_query(lambda c: c.data == "payment")
        async def show_payment(callback: types.CallbackQuery):
            await safe_edit_message(
                callback.message,
                "üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                "@monomomn\n\n"
                "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–∞—à ID –≤ –±–æ—Ç–µ.\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 ‚≠ê",
                reply_markup=get_profile_keyboard()
            )
            await callback.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
        @dp.callback_query(lambda c: c.data == "play")
        async def start_game(callback: types.CallbackQuery, state: FSMContext):
            user = get_or_create_user(callback.from_user.id, callback.from_user.username)
            if user.total_stars < 1:
                await safe_edit_message(
                    callback.message,
                    "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –∏–≥—Ä—ã!\n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                    reply_markup=get_profile_keyboard()
                )
                await callback.answer()
                return
            
            await safe_edit_message(
                callback.message,
                f"üé≤ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.total_stars:.2f} ‚≠ê\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ):",
                reply_markup=None
            )
            await state.update_data(user_id=callback.from_user.id)
            await state.set_state(GameStates.waiting_for_bet)
            await callback.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
        @dp.message(GameStates.waiting_for_bet)
        async def process_bet(message: types.Message, state: FSMContext):
            try:
                bet = float(message.text)
                user = get_or_create_user(message.from_user.id, message.from_user.username)
                
                if bet <= 0:
                    await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                    return
                
                if bet > user.total_stars:
                    await message.answer(
                        f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!\n"
                        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.total_stars:.2f} ‚≠ê",
                        reply_markup=get_main_menu_keyboard()
                    )
                    await state.clear()
                    return
                
                # –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
                dice1 = random.randint(1, 6)
                dice2 = random.randint(1, 6)
                total = dice1 + dice2
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                # –¢–µ–ø–µ—Ä—å –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ 10, 11 –∏–ª–∏ 12 (—à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –æ–∫–æ–ª–æ 16.7%)
                won = total in [10, 11, 12]
                stars_won = bet * 2.5 if won else -bet  # –£–º–µ–Ω—å—à–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞, —Ç–∞–∫ –∫–∞–∫ —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –±–æ–ª—å—à–µ
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                update_user_stats(message.from_user.id, stars_won, won)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                result_text = (
                    f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞:\n"
                    f"–ö–æ—Å—Ç—å 1: {dice1}\n"
                    f"–ö–æ—Å—Ç—å 2: {dice2}\n"
                    f"–°—É–º–º–∞: {total}\n\n"
                )
                
                if won:
                    result_text += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 2.5:.2f} ‚≠ê"
                else:
                    result_text += f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ {bet:.2f} ‚≠ê"
                
                await message.answer(result_text, reply_markup=get_main_menu_keyboard())
                await state.clear()
                
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error in main: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)