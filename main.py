# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards.inline import get_main_menu_keyboard, get_profile_keyboard, get_rules_keyboard
from db.database import get_or_create_user, update_user_stats

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

async def main():
    try:
        storage = MemoryStorage()
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            user = get_or_create_user(message.from_user.id, message.from_user.username)
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ –ë–æ—Ç!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        @dp.callback_query(lambda c: c.data == "profile")
        async def show_profile(callback: types.CallbackQuery):
            user = get_or_create_user(callback.from_user.id, callback.from_user.username)
            await callback.message.edit_text(
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞\n\n"
                f"–ò–º—è: {callback.from_user.first_name}\n"
                f"–ü–æ–±–µ–¥: {user.total_wins}\n"
                f"–í—Å–µ–≥–æ –∑–≤—ë–∑–¥: {user.total_stars:.2f} ‚≠êÔ∏è\n\n"
                f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É'\n"
                f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
                reply_markup=get_profile_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª
        @dp.callback_query(lambda c: c.data == "rules")
        async def show_rules(callback: types.CallbackQuery):
            rules_text = (
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
                "1. –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –Ω–∞ –∑–≤—ë–∑–¥—ã ‚≠êÔ∏è\n"
                "2. –í—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –±—Ä–æ—Å–∞–µ—Ç–µ –∫–æ—Å—Ç–∏\n"
                "3. –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–∞ –∫–æ—Å—Ç—è—Ö –±–æ–ª—å—à–µ 7 - –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ\n"
                "4. –ï—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 7 - –≤—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ\n"
                "5. –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–≤–æ–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É\n"
                "6. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É\n\n"
                "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üé≤"
            )
            await callback.message.edit_text(rules_text, reply_markup=get_rules_keyboard())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        @dp.callback_query(lambda c: c.data == "main_menu")
        async def return_to_menu(callback: types.CallbackQuery):
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
        @dp.callback_query(lambda c: c.data == "payment")
        async def show_payment(callback: types.CallbackQuery):
            await callback.message.edit_text(
                "üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                "@monomomn\n\n"
                "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–∞—à ID –≤ –±–æ—Ç–µ.",
                reply_markup=get_profile_keyboard()
            )
        
        logger.info("Starting bot...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error in main: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)